#!/usr/bin/env python

'''
A simple WSGI webserver for testing Breve templates.
'''

import sys
from optparse import OptionParser
from wsgiref.simple_server import make_server
import cgitb; cgitb.enable ( )

from fileserver import WSGIFileServerApplication

from breve import Template
from breve.tags.html import tags as html


class BreveApp ( object ):

    def __init__ ( self, options, args ):
        self.fileserver = WSGIFileServerApplication ( options.document_root, '/' )
        self.template_root = options.template_root
        self.index_file = options.index

    def __call__ ( self, environ, start_response ):
        uri = environ [ 'PATH_INFO' ].lstrip ( '/' )
        if not uri:
            uri = self.index_file

        t = Template ( html, root = self.template_root )
        try:
            result = t.render ( uri ).encode ( 'utf-8' )

        except OSError:
            # punt to static fileserver
            return self.fileserver ( environ, start_response )

        except:
            status = '500 Internal Server Error'
            result = cgitb.html ( sys.exc_info() )

        else:
            status = '200 OK'

        response_headers = [ ( 'Content-type', 'text/html' ) ]
        start_response ( status, response_headers )

        return result



if __name__ == '__main__':    

    parser = OptionParser ( )
    parser.add_option ( "-p", "--port", dest="port", default=9999,
                        help="listen on port", metavar="PORT")
    parser.add_option( "-b", "--bind", dest="interface", default='127.0.0.1',
                       help="listen on interface", metavar="ADDRESS" )
    parser.add_option( "-t", "--templates", dest="template_root", default='.',
                       help="location of templates", metavar="PATH" )
    parser.add_option( "-d", "--docroot", dest="document_root", default='.',
                       help="location of static files", metavar="PATH" )
    parser.add_option( "-i", "--index", dest="index", default='index',
                       help="default template to serve", metavar="NAME" )
    options, args = parser.parse_args ( )

    httpd = make_server ( options.interface, int ( options.port ), BreveApp ( options, args ) )
    print "Serving on %s:%s..." % ( options.interface, options.port )
    httpd.serve_forever ( )
